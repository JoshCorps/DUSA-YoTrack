extend page

block sidebar
	section
		ul(id="items")
			li(class="outlets") Outlets

block content
	script(src='/chartjs/Chart.js')
	script(src="https://maps.googleapis.com/maps/api/js?sensor=false")
	script(src='/hmap/heatmap.js')
	script(src='/hmap/gmaps-heatmap.js')
	script(src='https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.3/FileSaver.min.js')
	script.
		'use strict';
	-
		function ordinal_suffix_of(i) {
		    var j = i % 10,
		        k = i % 100;
		    if (j == 1 && k != 11) {
		        return i + "st";
		    }
		    if (j == 2 && k != 12) {
		        return i + "nd";
		    }
		    if (j == 3 && k != 13) {
		        return i + "rd";
		    }
		    return i + "th";
		}
		var monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
	
	div(class="block")
		div(class="flex justify-content-space-between")
			h1(class="flex-grow")= ordinal_suffix_of(day) + " of " + monthNames[month - 1] + " " + year
			- var today = new Date(year, month, day);
			- var yesterday = new Date(year, month, +day - 1);
			- var tomorrow = new Date(year, month, +day + 1);
			
            
			div(class="flex justify-content-space-between")
				a(class="button right-gap", href="/day_view/" + yesterday.getFullYear() + "/" + yesterday.getMonth() + "/" + yesterday.getDate())
					i(class="fa fa-arrow-left", aria-hidden="true")
					| 
					= ordinal_suffix_of(yesterday.getDate()) + ' of ' + monthNames[yesterday.getMonth() - 1] + ' ' + yesterday.getFullYear()
				a(class="button", href="/day_view/" + tomorrow.getFullYear() + "/" + tomorrow.getMonth() + "/" + tomorrow.getDate())
					i(class="fa fa-arrow-right", aria-hidden="true")
					| 
					= ordinal_suffix_of(tomorrow.getDate()) + " of " + monthNames[tomorrow.getMonth() - 1] + " " + tomorrow.getFullYear()
					
		script.
			var items = document.getElementById('items');
			var outlets = !{JSON.stringify(outlets)}
			var datasets = !{JSON.stringify(datasets)}
			
			console.log(outlets);
			
			for (var i = 0; i < outlets.length + 1; i++) {
				if (i !== outlets.length) {
					console.log(i);
					var showGraph = false;
					for (var e = 0; e < datasets[i].data.length; e++) {
						if (datasets[i].data[e]) {
							showGraph = true;
						}
					}
					if (showGraph) {
						var node = document.createElement('li');
						var textnode = document.createTextNode(outlets[i]);
						node.setAttribute('index', i);
						node.appendChild(textnode);
						node.onclick = (a, b) => { updateChart(a.target.getAttribute('index')); 
						a.target.classList.toggle('toggle');}
						items.appendChild(node);
					}
				} else {
					window.combinedIndex = i;
					var node = document.createElement('li');
					var textnode = document.createTextNode("Combined Results");
					node.setAttribute('index', i);
					node.appendChild(textnode);
					node.classList.toggle('toggle');
					node.onclick = (a) => { 
						updateChart(a.target.getAttribute('index')); 
						a.target.classList.toggle('toggle');
					}
					items.appendChild(node);
				}
			}
			
		canvas#myChart
			script.
				var ctx = document.getElementById("myChart").getContext('2d');
				var labels = !{JSON.stringify(hourLabels)};
				var ds = !{JSON.stringify(datasets)};
				var dsCombined = [ !{JSON.stringify( datasets[datasets.length - 1] )} ];
				var dsAll = !{JSON.stringify(datasets)};
				
				var myChart = new Chart(ctx, {
					type: 'bar',
					data: {
						labels: labels,
						datasets: dsCombined
					},
					options: {
						scales: {
							yAxes: [{
								ticks: {
									beginAtZero:true
								},
								scaleLabel: {
									display: true,
									labelString: 'Revenue (GBP)'
								}
							}]
						}
					}
				});
				
		button#export Export
		script.
			// set background color of chart to white so it looks nicer when exporting.
			var backgroundColor = 'white';
			Chart.plugins.register({
				beforeDraw: function(c) {
					var ctx = c.chart.ctx;
					ctx.fillStyle = backgroundColor;
					ctx.fillRect(0, 0, c.chart.width, c.chart.height);
				}
			});
			
			// used to get url parameters for file name. From sitepoint.com/url-parameters-jquery/
			$.urlParam = function (name) {
				var results = new RegExp('[\\?&]' + name + '=([^&#]*)')
				.exec(window.location.href);
				return results[1] || 0;
			}
			
			var canvas = $('#myChart').get(0);
			
			// saves chart
			$('#export').click(function() {
				canvas.toBlob(function(blob) {
					saveAs(blob, #{year} + "-" + #{month} + "-" + #{day} + ".png");
				});
			});
		
		script.
			
			
			let dataToggle = {};
			dataToggle[combinedIndex] = true;
			function updateChart(index)
			{
				dataToggle[index] = !dataToggle[index];
				
				let data = [];
				let toggles = Object.keys(dataToggle);
				for (let i = 0; i < toggles.length; i++) {
					
					if (dataToggle[toggles[i]]) {
						data.push(dsAll[toggles[i]]);
					}
				}
				
				myChart.data.datasets = data; //[dsAll[index]];
				myChart.update();
			}
			
			function showHeatmap()
			{
				var x = document.getElementById("map-canvas");
				var btn = document.getElementById("heatmapToggle");
				if (x.style.height === "0px") {
					x.style.height = "500px";
					btn.innerHTML = "Hide Activity Heatmap";
				} else {
					x.style.height = "0px";
					btn.innerHTML = "Show Activity Heatmap";
				}
				
			}
	
	//-
		div(class="block")
			div(id="map-canvas", style="height:500px;")
		
	//-
		button(id="heatmapToggle", type="button", "onclick"="showHeatmap()", style="margin:0 auto; display:block;")= "Hide Activity Heatmap"
		
		script.
			window.onload=function() {
			var mapOptions = {
				zoom: 16,
				center: new google.maps.LatLng(56.4577377,-2.9810413),
				mapTypeId: google.maps.MapTypeId.MAP
				};
				
			map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
			
			heatmap = new HeatmapOverlay(map, 
			  {
				"radius": 0.0006,
				"maxOpacity": 1, 
				"scaleRadius": true, 
				"useLocalExtrema": true,
				latField: 'lat',
				lngField: 'lng',
				valueField: 'count'
			  }
			);
			
			var heatmapData = !{JSON.stringify(heatmapData)};
			
			var testData = {
				max: 8, 
				data: [{lat:56.4577377, lng:-2.9810413, count: 7}, {lat:56.4578377, lng:-2.9610413, count: 3}] 
			};
			
			heatmap.setData(heatmapData);
			
			};
		
		